version: "3.7"


services:
#     doggrdb:
#         container_name: doggrdb
#         image: mongo
#         volumes:
#             - /data/doggrdb:/data/db # this is format of host_path:container_path
    postgres:
        container_name: postgres
        image: postgres
        restart: always
        ports:
            - "5432:5432"
        volumes:
          - 'postgres_data:/var/lib/postgresql/data'
        environment:
            - POSTGRES_DB=doggrdb
            - POSTGRES_USER=doggr_user
            - POSTGRES_PASSWORD=doggr_pass

    # This requires a sudo chown -R 1001:1001 ./minio locally first
    minio1:
        container_name: minio1
        image: docker.io/bitnami/minio:2022
        expose:
            - "9000"
            - "9001"
        # ports:  # NOTE!  HERE WE'RE CHANGING THE PORT FROM 9000 TO 8000 because our backend already uses 9000
        #     - '8000:9000'
        #     - '8001:9001'
        environment:
            - MINIO_DEFAULT_BUCKETS=doggr:public
            - MINIO_ROOT_USER=minioUser
            - MINIO_ROOT_PASSWORD=minioPass
        volumes:
            - 'minio_data:/data'
    backend:
        container_name: backend
        image: registry.digitalocean.com/doggr/backend
        #build: ./backend/
        restart: always
        #volumes:
            # This pulls in all of our code and mounts it
            # This allows us to quickly change our code and view results automatically
            # But should be REMOVED in a Production Compose
            #- './backend:/app'
            #- '/app/node_modules' #This prevents us from copying our node_modules when mounting
        ports:
            - "9000:9000"
        environment:
            - MINIO_HOST=minio1
            - MINIO_PORT=9000
            - MINIO_USER=minioUser
            - MINIO_PASS=minioPass
            - PGUSER=doggr_user
            - PGHOST=postgres
            - PGPASSWORD=doggr_pass
            - PGDATABASE=doggrdb
            - PGPORT=5432
            - TOKEN_SECRET=116A4857D1AC06E749417ED52EFDA0AECC534A35B5C6416A08DB355921BDF6CD
            - EXTERNAL_IP=138.197.52.82
        depends_on: #This is a lie
            - postgres
            - minio1
            #- doggrdb
    frontend:
       container_name: frontend

       image: registry.digitalocean.com/doggr/frontend
       # Build and Image are mutually exclusive, and build will override
       #build: ./frontend/
       #volumes:
            #- './frontend:/app'
            #- '/app/node_modules' #This prevents us from copying our node_modules when mounting
       ports:
            - "3000:3000"
       environment:
         - BACKEND_API=http://128.197.52.82:9000/api/v1
       depends_on:
            - postgres
            #- doggrdb






    ##########################################################################
    #################### MEGA MINIO FILE STORAGE EXAMPLE #####################
    # Just for fun and to show what you CAN accomplish with Docker IRL
    # starts 4 docker containers running minio server instances.
    # using an nginx reverse proxy with load balancing.  You can access
    # it through port 8000 similar to the baby minio container.


    # Settings and configurations that are common for all containers
    #x-minio-common: &minio-common
    #    image: quay.io/minio/minio:RELEASE.2022-05-04T07-45-27Z
    #    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    #    expose:
    #        - "9000"
    #        - "9001"
    #    environment:
    #        MINIO_ROOT_USER: minioadmin
    #        MINIO_ROOT_PASSWORD: minioadmin
    #    healthcheck:
    #        test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    #        interval: 30s
    #        timeout: 20s
    #        retries: 3


#    minio1:
#        <<: *minio-common
#        hostname: minio1
#        volumes:
#            - data1-1:/data1
#            - data1-2:/data2
#
#    minio2:
#        <<: *minio-common
#        hostname: minio2
#        volumes:
#            - data2-1:/data1
#            - data2-2:/data2
#
#    minio3:
#        <<: *minio-common
#        hostname: minio3
#        volumes:
#            - data3-1:/data1
#            - data3-2:/data2
#
#    minio4:
#        <<: *minio-common
#        hostname: minio4
#        volumes:
#            - data4-1:/data1
#            - data4-2:/data2
#
    nginx:
       container_name: nginx
       image: nginx:1.19.2-alpine
       hostname: nginx
       volumes:
           - ./nginx.conf:/etc/nginx/nginx.conf:ro
       ports:
           # NOTE!  HERE WE'RE CHANGING THE PORT FROM 9000 TO 8000 because our backend already uses 9000
           - "8000:9000"
           - "8001:9001"
       depends_on:
           - minio1
        #    - minio2
        #    - minio3
        #    - minio4
### By default this config uses default local driver,
### For custom volumes replace with volume driver configuration.
volumes:
    minio_data:
    postgres_data:
#        driver: local
#    data1-1:
#    data1-2:
#    data2-1:
#    data2-2:
#    data3-1:
#    data3-2:
#    data4-1:
#    data4-2:
